For the chaining hash table, I created a new node class to help out with the list for chaining. In the insert function, if I ran into a collision, it would create/add element to the end of the list. For the contain function, I made the function scan the entire array for the key, and if the key was found, it would then go through the list. In the value function, it was similar to contain and instead it would return the value. For delete, it would search for the key and delete it by scanning the table. Get_key_value would get the value in the given key, and the dump function simply prints out all the key, value pairs. 

For the open linear hash table, I recreated all the functions. If there was a collision in the insert function, it would immediately go to the next index until there are no more collisions and insert the value there. The contains function would linearly probe the table for the key. The value function is similar to contains, but instead it would linearly probe for the key and return the value. The delete function is pretty simple since I could just delete the value in the given key, but if there Ire collisions, it would have to linearly probe the table for the correct key and value to delete. The get_key_values gets the value in the key by linearly probing through the table, and dump simply prints out all the key, value pairs.

For the open quadratic hash table, it was similar to the open linear hash table, but instead of going to the next index, open quadratic would keep track of the number of collisions that have happened and add the counter to the index squared until there are no more collisions.

I changed MySet to match each different hash table. Initializing the set, I set it to the dictionary. Insert takes a key and I make it insert for both the data and satellite data. Contains will show what the key contains, and dump will simply print out all of the key,pair values.
